import java.util.Arrays;

class Solution {
    public int solution(int[] A) {
        int N = A.length;
        if (N < 2) {
            return 0;
        }

        long[] left = new long[N];
        long[] right = new long[N];

        for (int i = 0; i < N; i++) {
            left[i] = (long) i - A[i];  // Start of the disc
            right[i] = (long) i + A[i]; // End of the disc
        }

        Arrays.sort(left);
        Arrays.sort(right);

        int intersections = 0, openDiscs = 0;
        int rightIndex = 0;

        for (int i = 0; i < N; i++) {
            while (rightIndex < N && right[rightIndex] < left[i]) {
                openDiscs--; // Close discs that ended before new one starts
                rightIndex++;
            }

            intersections += openDiscs; // Count intersections with already open discs
            openDiscs++; // Open new disc

            if (intersections > 10_000_000) {
                return -1; // Exceeded limit
            }
        }

        return intersections;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        System.out.println(sol.solution(new int[]{1, 5, 2, 1, 4, 0})); // Expected: 11
        System.out.println(sol.solution(new int[]{1, 1, 1})); // Expected: 3
        System.out.println(sol.solution(new int[]{0, 0, 0})); // Expected: 0
    }
}
