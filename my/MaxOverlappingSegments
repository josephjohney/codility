// you can also use imports, for example:
// import java.util.*;
/*
 * Task description
Located on a line are N segments, numbered from 0 to N âˆ’ 1, whose positions are given in arrays A and B. For each I (0 â‰¤ I < N) the position of segment I is from A[I] to B[I] (inclusive). The segments are sorted by their ends, which means that B[K] â‰¤ B[K + 1] for K such that 0 â‰¤ K < N âˆ’ 1.

Two segments I and J, such that I â‰  J, are overlapping if they share at least one common point. In other words, A[I] â‰¤ A[J] â‰¤ B[I] or A[J] â‰¤ A[I] â‰¤ B[J].

We say that the set of segments is non-overlapping if it contains no two overlapping segments. The goal is to find the size of a non-overlapping set containing the maximal number of segments.

For example, consider arrays A, B such that:

    A[0] = 1    B[0] = 5
    A[1] = 3    B[1] = 6
    A[2] = 7    B[2] = 8
    A[3] = 9    B[3] = 9
    A[4] = 9    B[4] = 10
The segments are shown in the figure below.



The size of a non-overlapping set containing a maximal number of segments is 3. For example, possible sets are {0, 2, 3}, {0, 2, 4}, {1, 2, 3} or {1, 2, 4}. There is no non-overlapping set with four segments.

Write a function:

class Solution { public int solution(int[] A, int[] B); }

that, given two arrays A and B consisting of N integers, returns the size of a non-overlapping set containing a maximal number of segments.

For example, given arrays A, B shown above, the function should return 3, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..30,000];
each element of arrays A and B is an integer within the range [0..1,000,000,000];
A[I] â‰¤ B[I], for each I (0 â‰¤ I < N);
B[K] â‰¤ B[K + 1], for each K (0 â‰¤ K < N âˆ’ 1).    
 */
/*
 * This problem is a classic Greedy Algorithm problem â€” similar to the "Activity Selection" problem from scheduling.

âœ… Goal:
Youâ€™re given N segments on a line, each defined by a start (A[i]) and end (B[i]), and you want to choose the maximum number of non-overlapping segments.

ðŸ’¡ Greedy Strategy:
Since the segments are sorted by their end points (B[i]), we can iterate through them and always choose the next segment that starts after the last selected segment ends.

This guarantees the maximal number of non-overlapping segments.

âœ… Steps:
Initialize a counter count = 0.

Keep track of the end of the last added segment: lastEnd = -1 (a point before any segment).

Loop through segments:

If A[i] > lastEnd (segment starts after the last selected one ends):

Count this segment.

Update lastEnd = B[i].
 */

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A, int[] B) {
        // Implement your solution here

       int N =A.length;

        int count =0;
        
        int lastEnd= -1;

        for(int i=0;i<N;i++){
            if (A[i]>lastEnd){
                count++;
                lastEnd=B[i];
            }
        }
        return count;

    }
}
